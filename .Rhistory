a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2.ncol=2))
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
m <- matrix(c(2,4,3,1),nrow=2,ncol=2)
m
solve(m)
## Put comments here that give an overall description of what your
## functions do
## This function is intended to make a cache-able matrix
## to be used in R Programming Assignment 2. It will create
## a special matrix that can cache it's inverse. It should be
## a "square" matrix because solve() only works with square matrices.
## Comments
makeCacheMatrix <- function(x = matrix()) {
## We need to set up an empty cache to start
cache <- NULL
set <- function(y){
x <<- y
## This part makes sure the cache is
## reset whenever we run the function
cache <<- NULL
}
## This returns the matrix
get <- function(){
x
}
## This caches our inverse argument
setInverse <- function(solve){
cache <<- solve
}
## This adds the argument to the cache
getInverse <- function(){
cache
}
## This returns a list of all of our functions
list(set = set, get = get, setInverse = setInverse,
getInverse = getInverse)
}
## This function takes the matrix created in makeCacheMatrix
## and solves for it's inverse. If it has been solved before
## it can return the inverse from the cached version.
cacheSolve <- function(x, ...) {
inverse <- y$getInverse()
if(!is.null(inverse)){
message("getting cache")
return(inverse)
}
data <- y$get()
inverse <- solve(data)
y$setInverse(inverse)
inverse
}
makeCacheMatrix(x=c(2,4,3,1))
cacheSolve
makeCacheMatrix(x = 2,4,1,3
)
makeCacheMatrix(x=matrix(c(2,4,3,1),nrow=2,ncol=2)
)
cacheSolve(y)
cacheSolve(x)
cacheSolve(y)
cacheSolve <- function(y, ...) {
## This part gets the cache
inverse <- y$getInverse()
## returns cached value if it exists
if(!is.null(inverse)){
message("getting cache")
return(inverse)
}
## If the cache is empty, calculate inverse
data <- y$get()
inverse <- solve(data)
y$setInverse(inverse)
inverse
}
cacheSolve(y)
cacheSolve(x)
